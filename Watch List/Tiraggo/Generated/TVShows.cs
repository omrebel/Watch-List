//==============================================
// Generated by http://www.My2ndGeneration.com
//==============================================

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Linq;
using System.Data;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Tiraggo.Core;
using Tiraggo.Interfaces;
using Tiraggo.DynamicQuery;

namespace Watch_List
{

	//===============================================
	// Concrete Entity Class
	//===============================================
	[DebuggerDisplay("Data = {Debug}")]
	[Serializable]
	[DataContract]
	[KnownType(typeof(TVShows))]
	[XmlType("TVShows")]
	public partial class TVShows : tgTVShows
	{
		[DebuggerBrowsable(DebuggerBrowsableState.RootHidden | DebuggerBrowsableState.Never)]
		protected override tgEntityDebuggerView[] Debug
		{
			get { return base.Debug; }
		}

		override public tgEntity CreateInstance()
		{
			return new TVShows();
		}

		#region Static Quick Access Methods
		static public void Delete(System.Int32 id)
		{
			var obj = new TVShows();
			obj.Id = id;
			obj.AcceptChanges();
			obj.MarkAsDeleted();
			obj.Save();
		}

		static public void Delete(System.Int32 id, tgSqlAccessType sqlAccessType)
		{
			var obj = new TVShows();
			obj.Id = id;
			obj.AcceptChanges();
			obj.MarkAsDeleted();
			obj.Save(sqlAccessType);
		}
		#endregion
	}

	//===============================================
	// Abstract Entity Class
	//===============================================	
	[DataContract]
	[Serializable]
	abstract public partial class tgTVShows : tgEntity
	{
		public tgTVShows()
		{

		}

		#region LoadByPrimaryKey
		public virtual bool LoadByPrimaryKey(System.Int32 id)
		{
			if (this.tg.Connection.SqlAccessType == tgSqlAccessType.DynamicSQL)
				return LoadByPrimaryKeyDynamic(id);
			else
				return LoadByPrimaryKeyStoredProcedure(id);
		}

		public virtual bool LoadByPrimaryKey(tgSqlAccessType sqlAccessType, System.Int32 id)
		{
			if (sqlAccessType == tgSqlAccessType.DynamicSQL)
				return LoadByPrimaryKeyDynamic(id);
			else
				return LoadByPrimaryKeyStoredProcedure(id);
		}

		private bool LoadByPrimaryKeyDynamic(System.Int32 id)
		{
			TVShowsQuery query = new TVShowsQuery();
			query.Where(query.Id == id);
			return this.Load(query);
		}

		private bool LoadByPrimaryKeyStoredProcedure(System.Int32 id)
		{
			tgParameters parms = new tgParameters();
			parms.Add("Id", id);
			return this.Load(tgQueryType.StoredProcedure, this.tg.spLoadByPrimaryKey, parms);
		}
		#endregion

		#region Properties

		/// <summary>
		/// Maps to TVShows.Id
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public int? Id
		{
			get
			{
				return base.GetSystemInt32(TVShowsMetadata.ColumnNames.Id);
			}

			set
			{
				if (base.SetSystemInt32(TVShowsMetadata.ColumnNames.Id, value))
				{
					OnPropertyChanged(TVShowsMetadata.PropertyNames.Id);
				}
			}
		}

		/// <summary>
		/// Maps to TVShows.Title
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Title
		{
			get
			{
				return base.GetSystemString(TVShowsMetadata.ColumnNames.Title);
			}

			set
			{
				if (base.SetSystemString(TVShowsMetadata.ColumnNames.Title, value))
				{
					OnPropertyChanged(TVShowsMetadata.PropertyNames.Title);
				}
			}
		}

		/// <summary>
		/// Maps to TVShows.MazeId
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string MazeId
		{
			get
			{
				return base.GetSystemString(TVShowsMetadata.ColumnNames.MazeId);
			}

			set
			{
				if (base.SetSystemString(TVShowsMetadata.ColumnNames.MazeId, value))
				{
					OnPropertyChanged(TVShowsMetadata.PropertyNames.MazeId);
				}
			}
		}

		/// <summary>
		/// Maps to TVShows.Synopsis
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Synopsis
		{
			get
			{
				return base.GetSystemString(TVShowsMetadata.ColumnNames.Synopsis);
			}

			set
			{
				if (base.SetSystemString(TVShowsMetadata.ColumnNames.Synopsis, value))
				{
					OnPropertyChanged(TVShowsMetadata.PropertyNames.Synopsis);
				}
			}
		}

		/// <summary>
		/// Maps to TVShows.Image
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Image
		{
			get
			{
				return base.GetSystemString(TVShowsMetadata.ColumnNames.Image);
			}

			set
			{
				if (base.SetSystemString(TVShowsMetadata.ColumnNames.Image, value))
				{
					OnPropertyChanged(TVShowsMetadata.PropertyNames.Image);
				}
			}
		}

		/// <summary>
		/// Maps to TVShows.NextAirDate
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string NextAirDate
		{
			get
			{
				return base.GetSystemString(TVShowsMetadata.ColumnNames.NextAirDate);
			}

			set
			{
				if (base.SetSystemString(TVShowsMetadata.ColumnNames.NextAirDate, value))
				{
					OnPropertyChanged(TVShowsMetadata.PropertyNames.NextAirDate);
				}
			}
		}


		// For Tiraggo.js support and basic serialization of extra properties
		// brought back via Joins
		[DataMember(EmitDefaultValue = false)]
        public tgKeyValuePair[] tgExtendedData
        {
            get
            {
                Dictionary<string, object> extra = GetExtraColumns();

                if (extra.Keys.Count > 0)
                {
                    List<tgKeyValuePair> extended = new List<tgKeyValuePair>();

                    foreach (string key in extra.Keys)
                    {
                        extended.Add(new tgKeyValuePair { Key = key, Value = extra[key] });
                    }

                    return extended.ToArray();
                }

                return null;
            }

            set
            {
                foreach (tgKeyValuePair pair in value)
                {
                    this.SetColumn(pair.Key, pair.Value);
                }
            }
        }

		#endregion

		#region Housekeeping methods

		override protected IMetadata Meta
		{
			get
			{
				return TVShowsMetadata.Meta();
			}
		}

		#endregion

		#region Query Logic

		public TVShowsQuery Query
		{
			get
			{
				if (this.query == null)
				{
					this.query = new TVShowsQuery();
					InitQuery(this.query);
				}

				return this.query;
			}
		}

		public bool Load(TVShowsQuery query)
		{
			this.query = query;
			InitQuery(this.query);
			return this.Query.Load();
		}

		protected void InitQuery(TVShowsQuery query)
		{
			query.OnLoadDelegate = this.OnQueryLoaded;

			if (!query.tg2.HasConnection)
			{
				query.tg2.Connection = ((IEntity)this).Connection;
			}
		}

		#endregion

		[IgnoreDataMember]
		private TVShowsQuery query;
	}

	//===============================================
	// Concrete Collection Class
	//===============================================
	[DebuggerDisplay("Count = {Count}")]
	[Serializable]
	[CollectionDataContract]
	[XmlType("TVShowsCollection")]
	public partial class TVShowsCollection : tgTVShowsCollection, IEnumerable<TVShows>
	{
		public TVShows FindByPrimaryKey(int id)
		{
			return this.SingleOrDefault(e => e.Id == id);
		}

		#region WCF Service Class

		[DataContract]
		[KnownType(typeof(TVShows))]
		public class TVShowsCollectionWCFPacket : tgCollectionWCFPacket<TVShowsCollection>
		{
			public static implicit operator TVShowsCollection(TVShowsCollectionWCFPacket packet)
			{
				return packet.Collection;
			}

			public static implicit operator TVShowsCollectionWCFPacket(TVShowsCollection collection)
			{
				return new TVShowsCollectionWCFPacket() { Collection = collection };
			}
		}

		#endregion
	}

	//===============================================
	// Abstract Collection Class
	//===============================================	
	[Serializable]
	abstract public partial class tgTVShowsCollection : tgEntityCollection<TVShows>
	{
		#region Housekeeping methods
		override protected IMetadata Meta
		{
			get
			{
				return TVShowsMetadata.Meta();
			}
		}

		protected override string GetCollectionName()
		{
			return "TVShowsCollection";
		}

		#endregion

		#region Query Logic

		[BrowsableAttribute(false)]
		public TVShowsQuery Query
		{
			get
			{
				if (this.query == null)
				{
					this.query = new TVShowsQuery();
					InitQuery(this.query);
				}

				return this.query;
			}
		}

		public bool Load(TVShowsQuery query)
		{
			this.query = query;
			InitQuery(this.query);
			return Query.Load();
		}

		override protected tgDynamicQuery GetDynamicQuery()
		{
			if (this.query == null)
			{
				this.query = new TVShowsQuery();
				this.InitQuery(query);
			}
			return this.query;
		}

		protected void InitQuery(TVShowsQuery query)
		{
			query.OnLoadDelegate = this.OnQueryLoaded;
			if (!query.tg2.HasConnection)
			{
				query.tg2.Connection = ((IEntityCollection)this).Connection;
			}
		}

		protected override void HookupQuery(tgDynamicQuery query)
		{
			this.InitQuery((TVShowsQuery)query);
		}

		#endregion

		private TVShowsQuery query;
	}	

	//===============================================
	// Concrete Query Class
	//===============================================	
	[DebuggerDisplay("Query = {Parse()}")]
	public partial class TVShowsQuery : tgTVShowsQuery
	{
		public TVShowsQuery(string joinAlias)
		{
			this.tg.JoinAlias = joinAlias;
		}

		override protected string GetQueryName()
		{
			return "TVShowsQuery";
		}

		#region Explicit Casts

		public static explicit operator string(TVShowsQuery query)
		{
			return TVShowsQuery.SerializeHelper.ToXml(query);
		}

		public static explicit operator TVShowsQuery(string query)
		{
			return (TVShowsQuery)TVShowsQuery.SerializeHelper.FromXml(query, typeof(TVShowsQuery));
		}

		#endregion
	}

	//===============================================
	// Abstract Query Class
	//===============================================
	abstract public partial class tgTVShowsQuery : tgDynamicQuery
	{
		override protected IMetadata Meta
		{
			get
			{
				return TVShowsMetadata.Meta();
			}
		}	

		#region QueryItemFromName

		protected override tgQueryItem QueryItemFromName(string name)
		{
			switch (name)
			{
				case "Id": return this.Id;
				case "Title": return this.Title;
				case "MazeId": return this.MazeId;
				case "Synopsis": return this.Synopsis;
				case "Image": return this.Image;
				case "NextAirDate": return this.NextAirDate;

				default: return null;
			}
		}		

		#endregion

		#region tgQueryItems

		public tgQueryItem Id
		{
			get { return new tgQueryItem(this, TVShowsMetadata.ColumnNames.Id, tgSystemType.Int32); }
		}

		public tgQueryItem Title
		{
			get { return new tgQueryItem(this, TVShowsMetadata.ColumnNames.Title, tgSystemType.String); }
		}

		public tgQueryItem MazeId
		{
			get { return new tgQueryItem(this, TVShowsMetadata.ColumnNames.MazeId, tgSystemType.String); }
		}

		public tgQueryItem Synopsis
		{
			get { return new tgQueryItem(this, TVShowsMetadata.ColumnNames.Synopsis, tgSystemType.String); }
		}

		public tgQueryItem Image
		{
			get { return new tgQueryItem(this, TVShowsMetadata.ColumnNames.Image, tgSystemType.String); }
		}

		public tgQueryItem NextAirDate
		{
			get { return new tgQueryItem(this, TVShowsMetadata.ColumnNames.NextAirDate, tgSystemType.String); }
		}


		#endregion
	}

	//===============================================
	// Concrete Metadata Class
	//===============================================
	[Serializable]
	public partial class TVShowsMetadata : tgMetadata, IMetadata
	{
		#region Protected Constructor
		protected TVShowsMetadata()
		{
			m_columns = new tgColumnMetadataCollection();
			tgColumnMetadata c;

			c = new tgColumnMetadata(TVShowsMetadata.ColumnNames.Id, 0, typeof(System.Int32), tgSystemType.Int32);
			c.PropertyName = TVShowsMetadata.PropertyNames.Id;
			c.IsInPrimaryKey = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(TVShowsMetadata.ColumnNames.Title, 1, typeof(System.String), tgSystemType.String);
			c.PropertyName = TVShowsMetadata.PropertyNames.Title;
			m_columns.Add(c);

			c = new tgColumnMetadata(TVShowsMetadata.ColumnNames.MazeId, 2, typeof(System.String), tgSystemType.String);
			c.PropertyName = TVShowsMetadata.PropertyNames.MazeId;
			m_columns.Add(c);

			c = new tgColumnMetadata(TVShowsMetadata.ColumnNames.Synopsis, 3, typeof(System.String), tgSystemType.String);
			c.PropertyName = TVShowsMetadata.PropertyNames.Synopsis;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(TVShowsMetadata.ColumnNames.Image, 4, typeof(System.String), tgSystemType.String);
			c.PropertyName = TVShowsMetadata.PropertyNames.Image;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(TVShowsMetadata.ColumnNames.NextAirDate, 5, typeof(System.String), tgSystemType.String);
			c.PropertyName = TVShowsMetadata.PropertyNames.NextAirDate;
			c.IsNullable = true;
			m_columns.Add(c);
		}
		#endregion

		static public TVShowsMetadata Meta()
		{
			return meta;
		}

		public Guid DataID
		{
			get { return base.m_dataID; }
		}

		public bool MultiProviderMode
		{
			get { return false; }
		}

		public tgColumnMetadataCollection Columns
		{
			get { return base.m_columns; }
		}

		#region ColumnNames
		public class ColumnNames
		{
			public const string Id = "Id";
			public const string Title = "Title";
			public const string MazeId = "MazeId";
			public const string Synopsis = "Synopsis";
			public const string Image = "Image";
			public const string NextAirDate = "NextAirDate";
		}
		#endregion

		#region PropertyNames
		public class PropertyNames
		{
			public const string Id = "Id";
			public const string Title = "Title";
			public const string MazeId = "MazeId";
			public const string Synopsis = "Synopsis";
			public const string Image = "Image";
			public const string NextAirDate = "NextAirDate";
		}
		#endregion

		public tgProviderSpecificMetadata GetProviderMetadata(string mapName)
		{
			MapToMeta mapMethod = mapDelegates[mapName];
			if (mapMethod != null)
				return mapMethod(mapName);
			else
				return null;
		}

		#region MAP esDefault

		static private int RegisterDelegateesDefault()
		{
			// This is only executed once per the life of the application
			lock (typeof(TVShowsMetadata))
			{
				if (TVShowsMetadata.mapDelegates == null)
				{
					TVShowsMetadata.mapDelegates = new Dictionary<string, MapToMeta>();
				}

				if (TVShowsMetadata.meta == null)
				{
					TVShowsMetadata.meta = new TVShowsMetadata();
				}

				MapToMeta mapMethod = new MapToMeta(meta.tgDefault);
				mapDelegates.Add("tgDefault", mapMethod);
				mapMethod("tgDefault");
			}
			return 0;
		}

		private tgProviderSpecificMetadata tgDefault(string mapName)
		{
			if (!m_providerMetadataMaps.ContainsKey(mapName))
			{
				tgProviderSpecificMetadata meta = new tgProviderSpecificMetadata();


				meta.AddTypeMap("Id", new tgTypeMap("integer", "System.Int32"));
				meta.AddTypeMap("Title", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("MazeId", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("Synopsis", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("Image", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("NextAirDate", new tgTypeMap("text", "System.String"));

				meta.Source = "TVShows";
				meta.Destination = "TVShows";

				meta.spInsert = "proc_TVShowsInsert";
				meta.spUpdate = "proc_TVShowsUpdate";
				meta.spDelete = "proc_TVShowsDelete";
				meta.spLoadAll = "proc_TVShowsLoadAll";
				meta.spLoadByPrimaryKey = "proc_TVShowsLoadByPrimaryKey";

				this.m_providerMetadataMaps["tgDefault"] = meta;
			}

			return this.m_providerMetadataMaps["tgDefault"];
		}

		#endregion

		static private TVShowsMetadata meta;
		static protected Dictionary<string, MapToMeta> mapDelegates;
		static private int _tgDefault = RegisterDelegateesDefault();
	}
}

